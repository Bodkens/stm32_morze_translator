
morze_translator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080016c4  080016c4  000116c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e8  080016e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080016e8  080016e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016e8  080016e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e8  080016e8  000116e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080016fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080016fc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000360e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e21  00000000  00000000  00023643  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e0  00000000  00000000  00024468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000358  00000000  00000000  00024848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015feb  00000000  00000000  00024ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003f68  00000000  00000000  0003ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e41b  00000000  00000000  0003eaf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bcf0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d94  00000000  00000000  000bcf8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016ac 	.word	0x080016ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080016ac 	.word	0x080016ac

0800014c <dot.5780>:

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char sentence[] = "abc";
void dot()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000156:	2201      	movs	r2, #1
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	480a      	ldr	r0, [pc, #40]	; (8000188 <dot.5780+0x3c>)
 800015e:	f000 fe77 	bl	8000e50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000166:	f000 fc13 	bl	8000990 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800016a:	2200      	movs	r2, #0
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4805      	ldr	r0, [pc, #20]	; (8000188 <dot.5780+0x3c>)
 8000172:	f000 fe6d 	bl	8000e50 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 fc09 	bl	8000990 <HAL_Delay>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40011000 	.word	0x40011000

0800018c <main>:
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b084      	sub	sp, #16
 8000190:	af00      	add	r7, sp, #0
int main(void)
 8000192:	f107 0318 	add.w	r3, r7, #24
 8000196:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8000198:	f000 fb98 	bl	80008cc <HAL_Init>
  SystemClock_Config();
 800019c:	f000 fa76 	bl	800068c <SystemClock_Config>
  MX_GPIO_Init();
 80001a0:	f000 faba 	bl	8000718 <MX_GPIO_Init>
char sentence[] = "abc";
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <main+0x24>)
 80001a6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
	HAL_Delay(1000);
}
  while (1)
  {
	  for (int i = 0; i < sizeof(sentence) - 1; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	e23b      	b.n	8000626 <main+0x49a>
 80001ae:	bf00      	nop
 80001b0:	00636261 	.word	0x00636261
	  {
		  if (sentence[i] == 'a') // * -
 80001b4:	1d3a      	adds	r2, r7, #4
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4413      	add	r3, r2
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	2b61      	cmp	r3, #97	; 0x61
 80001be:	d109      	bne.n	80001d4 <main+0x48>
		  {
			  dot(); dash();
 80001c0:	f107 0308 	add.w	r3, r7, #8
 80001c4:	469c      	mov	ip, r3
 80001c6:	f7ff ffc1 	bl	800014c <dot.5780>
 80001ca:	f107 0308 	add.w	r3, r7, #8
 80001ce:	469c      	mov	ip, r3
 80001d0:	f000 fa3c 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'b') // - * * *
 80001d4:	1d3a      	adds	r2, r7, #4
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	4413      	add	r3, r2
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b62      	cmp	r3, #98	; 0x62
 80001de:	d113      	bne.n	8000208 <main+0x7c>
		  {
		  	  dash(); dot(); dot(); dot();
 80001e0:	f107 0308 	add.w	r3, r7, #8
 80001e4:	469c      	mov	ip, r3
 80001e6:	f000 fa31 	bl	800064c <dash.5782>
 80001ea:	f107 0308 	add.w	r3, r7, #8
 80001ee:	469c      	mov	ip, r3
 80001f0:	f7ff ffac 	bl	800014c <dot.5780>
 80001f4:	f107 0308 	add.w	r3, r7, #8
 80001f8:	469c      	mov	ip, r3
 80001fa:	f7ff ffa7 	bl	800014c <dot.5780>
 80001fe:	f107 0308 	add.w	r3, r7, #8
 8000202:	469c      	mov	ip, r3
 8000204:	f7ff ffa2 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'c') // - * - *
 8000208:	1d3a      	adds	r2, r7, #4
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4413      	add	r3, r2
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b63      	cmp	r3, #99	; 0x63
 8000212:	d113      	bne.n	800023c <main+0xb0>
		  {
		  	  dash(); dot(); dash(); dot();
 8000214:	f107 0308 	add.w	r3, r7, #8
 8000218:	469c      	mov	ip, r3
 800021a:	f000 fa17 	bl	800064c <dash.5782>
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	469c      	mov	ip, r3
 8000224:	f7ff ff92 	bl	800014c <dot.5780>
 8000228:	f107 0308 	add.w	r3, r7, #8
 800022c:	469c      	mov	ip, r3
 800022e:	f000 fa0d 	bl	800064c <dash.5782>
 8000232:	f107 0308 	add.w	r3, r7, #8
 8000236:	469c      	mov	ip, r3
 8000238:	f7ff ff88 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'd') // - * *
 800023c:	1d3a      	adds	r2, r7, #4
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b64      	cmp	r3, #100	; 0x64
 8000246:	d10e      	bne.n	8000266 <main+0xda>
		  {
		  	  dash(); dot(); dot();
 8000248:	f107 0308 	add.w	r3, r7, #8
 800024c:	469c      	mov	ip, r3
 800024e:	f000 f9fd 	bl	800064c <dash.5782>
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	469c      	mov	ip, r3
 8000258:	f7ff ff78 	bl	800014c <dot.5780>
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	469c      	mov	ip, r3
 8000262:	f7ff ff73 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'e') // *
 8000266:	1d3a      	adds	r2, r7, #4
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	4413      	add	r3, r2
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b65      	cmp	r3, #101	; 0x65
 8000270:	d104      	bne.n	800027c <main+0xf0>
		  {
		  	  dot();
 8000272:	f107 0308 	add.w	r3, r7, #8
 8000276:	469c      	mov	ip, r3
 8000278:	f7ff ff68 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'f') // * * - *
 800027c:	1d3a      	adds	r2, r7, #4
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	4413      	add	r3, r2
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b66      	cmp	r3, #102	; 0x66
 8000286:	d113      	bne.n	80002b0 <main+0x124>
		  {
		  	  dot(); dot(); dash(); dot();
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	469c      	mov	ip, r3
 800028e:	f7ff ff5d 	bl	800014c <dot.5780>
 8000292:	f107 0308 	add.w	r3, r7, #8
 8000296:	469c      	mov	ip, r3
 8000298:	f7ff ff58 	bl	800014c <dot.5780>
 800029c:	f107 0308 	add.w	r3, r7, #8
 80002a0:	469c      	mov	ip, r3
 80002a2:	f000 f9d3 	bl	800064c <dash.5782>
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	469c      	mov	ip, r3
 80002ac:	f7ff ff4e 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'g') // - - *
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	4413      	add	r3, r2
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b67      	cmp	r3, #103	; 0x67
 80002ba:	d10e      	bne.n	80002da <main+0x14e>
		  {
			  dash(); dash(); dot();
 80002bc:	f107 0308 	add.w	r3, r7, #8
 80002c0:	469c      	mov	ip, r3
 80002c2:	f000 f9c3 	bl	800064c <dash.5782>
 80002c6:	f107 0308 	add.w	r3, r7, #8
 80002ca:	469c      	mov	ip, r3
 80002cc:	f000 f9be 	bl	800064c <dash.5782>
 80002d0:	f107 0308 	add.w	r3, r7, #8
 80002d4:	469c      	mov	ip, r3
 80002d6:	f7ff ff39 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'h') // * * * *
 80002da:	1d3a      	adds	r2, r7, #4
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	4413      	add	r3, r2
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b68      	cmp	r3, #104	; 0x68
 80002e4:	d113      	bne.n	800030e <main+0x182>
		  {
			  dot(); dot(); dot(); dot();
 80002e6:	f107 0308 	add.w	r3, r7, #8
 80002ea:	469c      	mov	ip, r3
 80002ec:	f7ff ff2e 	bl	800014c <dot.5780>
 80002f0:	f107 0308 	add.w	r3, r7, #8
 80002f4:	469c      	mov	ip, r3
 80002f6:	f7ff ff29 	bl	800014c <dot.5780>
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	469c      	mov	ip, r3
 8000300:	f7ff ff24 	bl	800014c <dot.5780>
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	469c      	mov	ip, r3
 800030a:	f7ff ff1f 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'i') // * *
 800030e:	1d3a      	adds	r2, r7, #4
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b69      	cmp	r3, #105	; 0x69
 8000318:	d109      	bne.n	800032e <main+0x1a2>
		  {
		  	  dot(); dot();
 800031a:	f107 0308 	add.w	r3, r7, #8
 800031e:	469c      	mov	ip, r3
 8000320:	f7ff ff14 	bl	800014c <dot.5780>
 8000324:	f107 0308 	add.w	r3, r7, #8
 8000328:	469c      	mov	ip, r3
 800032a:	f7ff ff0f 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'j') // * - - -
 800032e:	1d3a      	adds	r2, r7, #4
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	4413      	add	r3, r2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b6a      	cmp	r3, #106	; 0x6a
 8000338:	d113      	bne.n	8000362 <main+0x1d6>
		  {
			  dot(); dash(); dash(); dash();
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	469c      	mov	ip, r3
 8000340:	f7ff ff04 	bl	800014c <dot.5780>
 8000344:	f107 0308 	add.w	r3, r7, #8
 8000348:	469c      	mov	ip, r3
 800034a:	f000 f97f 	bl	800064c <dash.5782>
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	469c      	mov	ip, r3
 8000354:	f000 f97a 	bl	800064c <dash.5782>
 8000358:	f107 0308 	add.w	r3, r7, #8
 800035c:	469c      	mov	ip, r3
 800035e:	f000 f975 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'k') // - * -
 8000362:	1d3a      	adds	r2, r7, #4
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	4413      	add	r3, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	2b6b      	cmp	r3, #107	; 0x6b
 800036c:	d10e      	bne.n	800038c <main+0x200>
		  {
			  dash(); dot(); dash();
 800036e:	f107 0308 	add.w	r3, r7, #8
 8000372:	469c      	mov	ip, r3
 8000374:	f000 f96a 	bl	800064c <dash.5782>
 8000378:	f107 0308 	add.w	r3, r7, #8
 800037c:	469c      	mov	ip, r3
 800037e:	f7ff fee5 	bl	800014c <dot.5780>
 8000382:	f107 0308 	add.w	r3, r7, #8
 8000386:	469c      	mov	ip, r3
 8000388:	f000 f960 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'l') // * - * *
 800038c:	1d3a      	adds	r2, r7, #4
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	4413      	add	r3, r2
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b6c      	cmp	r3, #108	; 0x6c
 8000396:	d113      	bne.n	80003c0 <main+0x234>
		  {
		  	  dot(); dash(); dot(); dot();
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	469c      	mov	ip, r3
 800039e:	f7ff fed5 	bl	800014c <dot.5780>
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	469c      	mov	ip, r3
 80003a8:	f000 f950 	bl	800064c <dash.5782>
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	469c      	mov	ip, r3
 80003b2:	f7ff fecb 	bl	800014c <dot.5780>
 80003b6:	f107 0308 	add.w	r3, r7, #8
 80003ba:	469c      	mov	ip, r3
 80003bc:	f7ff fec6 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'm') // - -
 80003c0:	1d3a      	adds	r2, r7, #4
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4413      	add	r3, r2
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b6d      	cmp	r3, #109	; 0x6d
 80003ca:	d109      	bne.n	80003e0 <main+0x254>
		  {
			  dash(); dash();
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	469c      	mov	ip, r3
 80003d2:	f000 f93b 	bl	800064c <dash.5782>
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	469c      	mov	ip, r3
 80003dc:	f000 f936 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'n') // - *
 80003e0:	1d3a      	adds	r2, r7, #4
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4413      	add	r3, r2
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b6e      	cmp	r3, #110	; 0x6e
 80003ea:	d109      	bne.n	8000400 <main+0x274>
		  {
			  dash(); dot();
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	469c      	mov	ip, r3
 80003f2:	f000 f92b 	bl	800064c <dash.5782>
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	469c      	mov	ip, r3
 80003fc:	f7ff fea6 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'o') // - - -
 8000400:	1d3a      	adds	r2, r7, #4
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b6f      	cmp	r3, #111	; 0x6f
 800040a:	d10e      	bne.n	800042a <main+0x29e>
		  {
			  dash(); dash(); dash();
 800040c:	f107 0308 	add.w	r3, r7, #8
 8000410:	469c      	mov	ip, r3
 8000412:	f000 f91b 	bl	800064c <dash.5782>
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	469c      	mov	ip, r3
 800041c:	f000 f916 	bl	800064c <dash.5782>
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	469c      	mov	ip, r3
 8000426:	f000 f911 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'p') // * - - *
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	4413      	add	r3, r2
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b70      	cmp	r3, #112	; 0x70
 8000434:	d113      	bne.n	800045e <main+0x2d2>
		  {
			  dot(); dash(); dash(); dot();
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	469c      	mov	ip, r3
 800043c:	f7ff fe86 	bl	800014c <dot.5780>
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	469c      	mov	ip, r3
 8000446:	f000 f901 	bl	800064c <dash.5782>
 800044a:	f107 0308 	add.w	r3, r7, #8
 800044e:	469c      	mov	ip, r3
 8000450:	f000 f8fc 	bl	800064c <dash.5782>
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	469c      	mov	ip, r3
 800045a:	f7ff fe77 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 'q') // - - * -
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b71      	cmp	r3, #113	; 0x71
 8000468:	d113      	bne.n	8000492 <main+0x306>
		  {
			  dash(); dash(); dot(); dash();
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	469c      	mov	ip, r3
 8000470:	f000 f8ec 	bl	800064c <dash.5782>
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	469c      	mov	ip, r3
 800047a:	f000 f8e7 	bl	800064c <dash.5782>
 800047e:	f107 0308 	add.w	r3, r7, #8
 8000482:	469c      	mov	ip, r3
 8000484:	f7ff fe62 	bl	800014c <dot.5780>
 8000488:	f107 0308 	add.w	r3, r7, #8
 800048c:	469c      	mov	ip, r3
 800048e:	f000 f8dd 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'r') // * - *
 8000492:	1d3a      	adds	r2, r7, #4
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	4413      	add	r3, r2
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b72      	cmp	r3, #114	; 0x72
 800049c:	d10e      	bne.n	80004bc <main+0x330>
		  {
			  dot(); dash(); dot();
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	469c      	mov	ip, r3
 80004a4:	f7ff fe52 	bl	800014c <dot.5780>
 80004a8:	f107 0308 	add.w	r3, r7, #8
 80004ac:	469c      	mov	ip, r3
 80004ae:	f000 f8cd 	bl	800064c <dash.5782>
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	469c      	mov	ip, r3
 80004b8:	f7ff fe48 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 's') // * * *
 80004bc:	1d3a      	adds	r2, r7, #4
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	4413      	add	r3, r2
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b73      	cmp	r3, #115	; 0x73
 80004c6:	d10e      	bne.n	80004e6 <main+0x35a>
		  {
			  dot(); dot(); dot();
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	469c      	mov	ip, r3
 80004ce:	f7ff fe3d 	bl	800014c <dot.5780>
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	469c      	mov	ip, r3
 80004d8:	f7ff fe38 	bl	800014c <dot.5780>
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	469c      	mov	ip, r3
 80004e2:	f7ff fe33 	bl	800014c <dot.5780>
		  }
		  if (sentence[i] == 't') // -
 80004e6:	1d3a      	adds	r2, r7, #4
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b74      	cmp	r3, #116	; 0x74
 80004f0:	d104      	bne.n	80004fc <main+0x370>
		  {
			  dash();
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	469c      	mov	ip, r3
 80004f8:	f000 f8a8 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'u') // * * -
 80004fc:	1d3a      	adds	r2, r7, #4
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b75      	cmp	r3, #117	; 0x75
 8000506:	d10e      	bne.n	8000526 <main+0x39a>
		  {
			  dot(); dot(); dash();
 8000508:	f107 0308 	add.w	r3, r7, #8
 800050c:	469c      	mov	ip, r3
 800050e:	f7ff fe1d 	bl	800014c <dot.5780>
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	469c      	mov	ip, r3
 8000518:	f7ff fe18 	bl	800014c <dot.5780>
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	469c      	mov	ip, r3
 8000522:	f000 f893 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'v') // * * * -
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b76      	cmp	r3, #118	; 0x76
 8000530:	d113      	bne.n	800055a <main+0x3ce>
		  {
			  dot(); dot(); dot(); dash();
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	469c      	mov	ip, r3
 8000538:	f7ff fe08 	bl	800014c <dot.5780>
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	469c      	mov	ip, r3
 8000542:	f7ff fe03 	bl	800014c <dot.5780>
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	469c      	mov	ip, r3
 800054c:	f7ff fdfe 	bl	800014c <dot.5780>
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	469c      	mov	ip, r3
 8000556:	f000 f879 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'w') // * - -
 800055a:	1d3a      	adds	r2, r7, #4
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	4413      	add	r3, r2
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b77      	cmp	r3, #119	; 0x77
 8000564:	d10e      	bne.n	8000584 <main+0x3f8>
		  {
			  dot(); dash(); dash();
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	469c      	mov	ip, r3
 800056c:	f7ff fdee 	bl	800014c <dot.5780>
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	469c      	mov	ip, r3
 8000576:	f000 f869 	bl	800064c <dash.5782>
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	469c      	mov	ip, r3
 8000580:	f000 f864 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'x') // - * * -
 8000584:	1d3a      	adds	r2, r7, #4
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b78      	cmp	r3, #120	; 0x78
 800058e:	d113      	bne.n	80005b8 <main+0x42c>
		  {
			  dash(); dot(); dot(); dash();
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	469c      	mov	ip, r3
 8000596:	f000 f859 	bl	800064c <dash.5782>
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	469c      	mov	ip, r3
 80005a0:	f7ff fdd4 	bl	800014c <dot.5780>
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	469c      	mov	ip, r3
 80005aa:	f7ff fdcf 	bl	800014c <dot.5780>
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	469c      	mov	ip, r3
 80005b4:	f000 f84a 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'y') // - * - -
 80005b8:	1d3a      	adds	r2, r7, #4
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b79      	cmp	r3, #121	; 0x79
 80005c2:	d113      	bne.n	80005ec <main+0x460>
		  {
			  dash(); dot(); dash(); dash();
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	469c      	mov	ip, r3
 80005ca:	f000 f83f 	bl	800064c <dash.5782>
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	469c      	mov	ip, r3
 80005d4:	f7ff fdba 	bl	800014c <dot.5780>
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	469c      	mov	ip, r3
 80005de:	f000 f835 	bl	800064c <dash.5782>
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	469c      	mov	ip, r3
 80005e8:	f000 f830 	bl	800064c <dash.5782>
		  }
		  if (sentence[i] == 'z') // - - * *
 80005ec:	1d3a      	adds	r2, r7, #4
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b7a      	cmp	r3, #122	; 0x7a
 80005f6:	d113      	bne.n	8000620 <main+0x494>
		  {
			  dash(); dash(); dot(); dot();
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	469c      	mov	ip, r3
 80005fe:	f000 f825 	bl	800064c <dash.5782>
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	469c      	mov	ip, r3
 8000608:	f000 f820 	bl	800064c <dash.5782>
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	469c      	mov	ip, r3
 8000612:	f7ff fd9b 	bl	800014c <dot.5780>
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	469c      	mov	ip, r3
 800061c:	f7ff fd96 	bl	800014c <dot.5780>
	  for (int i = 0; i < sizeof(sentence) - 1; i++)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	2b02      	cmp	r3, #2
 800062a:	f67f adc3 	bls.w	80001b4 <main+0x28>
		  }
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x4bc>)
 8000636:	f000 fc0b 	bl	8000e50 <HAL_GPIO_WritePin>
	  break;
 800063a:	bf00      	nop
 800063c:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40011000 	.word	0x40011000

0800064c <dash.5782>:
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <dash.5782+0x3c>)
 800065e:	f000 fbf7 	bl	8000e50 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 f993 	bl	8000990 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <dash.5782+0x3c>)
 8000672:	f000 fbed 	bl	8000e50 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067a:	f000 f989 	bl	8000990 <HAL_Delay>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40011000 	.word	0x40011000

0800068c <SystemClock_Config>:
/**-
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b090      	sub	sp, #64	; 0x40
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2228      	movs	r2, #40	; 0x28
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fffe 	bl	800169c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ae:	2301      	movs	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fbd3 	bl	8000e80 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006e0:	f000 f866 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fe3e 	bl	8001380 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800070a:	f000 f851 	bl	80007b0 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_GPIO_Init+0x90>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <MX_GPIO_Init+0x90>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0310 	and.w	r3, r3, #16
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0x90>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0320 	and.w	r3, r3, #32
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x90>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <MX_GPIO_Init+0x90>)
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x90>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0304 	and.w	r3, r3, #4
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_GPIO_Init+0x94>)
 800077c:	f000 fb68 	bl	8000e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2302      	movs	r3, #2
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0x94>)
 800079a:	f000 f9ff 	bl	8000b9c <HAL_GPIO_Init>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40011000 	.word	0x40011000

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <HAL_MspInit+0x5c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <HAL_MspInit+0x5c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_MspInit+0x5c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x5c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_MspInit+0x5c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_MspInit+0x5c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_MspInit+0x60>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4a04      	ldr	r2, [pc, #16]	; (800081c <HAL_MspInit+0x60>)
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40021000 	.word	0x40021000
 800081c:	40010000 	.word	0x40010000

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <HardFault_Handler+0x4>

08000832 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <MemManage_Handler+0x4>

08000838 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <BusFault_Handler+0x4>

0800083e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f874 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}

08000874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000882:	e003      	b.n	800088c <LoopCopyDataInit>

08000884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800088a:	3104      	adds	r1, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000894:	d3f6      	bcc.n	8000884 <CopyDataInit>
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000898:	e002      	b.n	80008a0 <LoopFillZerobss>

0800089a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800089c:	f842 3b04 	str.w	r3, [r2], #4

080008a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a4:	d3f9      	bcc.n	800089a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008a6:	f7ff ffe5 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008aa:	f000 fed3 	bl	8001654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fc6d 	bl	800018c <main>
  bx lr
 80008b2:	4770      	bx	lr
  ldr r3, =_sidata
 80008b4:	080016f0 	.word	0x080016f0
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008c0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008c4:	2000002c 	.word	0x2000002c

080008c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC1_2_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x28>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x28>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f929 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff ff68 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f933 	bl	8000b82 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000934:	f000 f909 	bl	8000b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	20000028 	.word	0x20000028

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000028 	.word	0x20000028

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff fff0 	bl	800097c <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a8:	d005      	beq.n	80009b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_Delay+0x40>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b6:	bf00      	nop
 80009b8:	f7ff ffe0 	bl	800097c <HAL_GetTick>
 80009bc:	4602      	mov	r2, r0
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d8f7      	bhi.n	80009b8 <HAL_Delay+0x28>
  {
  }
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00f      	b.n	8000b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <SysTick_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0e:	210f      	movs	r1, #15
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b14:	f7ff ff90 	bl	8000a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <SysTick_Config+0x40>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <SysTick_Config+0x40>)
 8000b20:	2207      	movs	r2, #7
 8000b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff ff49 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5c:	f7ff ff5e 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	6978      	ldr	r0, [r7, #20]
 8000b68:	f7ff ff90 	bl	8000a8c <NVIC_EncodePriority>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b72:	4611      	mov	r1, r2
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff5f 	bl	8000a38 <__NVIC_SetPriority>
}
 8000b7a:	bf00      	nop
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffb0 	bl	8000af0 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b08b      	sub	sp, #44	; 0x2c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e127      	b.n	8000e00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	f040 8116 	bne.w	8000dfa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d034      	beq.n	8000c40 <HAL_GPIO_Init+0xa4>
 8000bd6:	2b12      	cmp	r3, #18
 8000bd8:	d80d      	bhi.n	8000bf6 <HAL_GPIO_Init+0x5a>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d02b      	beq.n	8000c36 <HAL_GPIO_Init+0x9a>
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d804      	bhi.n	8000bec <HAL_GPIO_Init+0x50>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d031      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d01c      	beq.n	8000c24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bea:	e048      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d043      	beq.n	8000c78 <HAL_GPIO_Init+0xdc>
 8000bf0:	2b11      	cmp	r3, #17
 8000bf2:	d01b      	beq.n	8000c2c <HAL_GPIO_Init+0x90>
          break;
 8000bf4:	e043      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bf6:	4a89      	ldr	r2, [pc, #548]	; (8000e1c <HAL_GPIO_Init+0x280>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d026      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000bfc:	4a87      	ldr	r2, [pc, #540]	; (8000e1c <HAL_GPIO_Init+0x280>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d806      	bhi.n	8000c10 <HAL_GPIO_Init+0x74>
 8000c02:	4a87      	ldr	r2, [pc, #540]	; (8000e20 <HAL_GPIO_Init+0x284>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d020      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c08:	4a86      	ldr	r2, [pc, #536]	; (8000e24 <HAL_GPIO_Init+0x288>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d01d      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
          break;
 8000c0e:	e036      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c10:	4a85      	ldr	r2, [pc, #532]	; (8000e28 <HAL_GPIO_Init+0x28c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d019      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c16:	4a85      	ldr	r2, [pc, #532]	; (8000e2c <HAL_GPIO_Init+0x290>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d016      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
 8000c1c:	4a84      	ldr	r2, [pc, #528]	; (8000e30 <HAL_GPIO_Init+0x294>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xae>
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e028      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e023      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01e      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e019      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e012      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e008      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e002      	b.n	8000c7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2bff      	cmp	r3, #255	; 0xff
 8000c82:	d801      	bhi.n	8000c88 <HAL_GPIO_Init+0xec>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	e001      	b.n	8000c8c <HAL_GPIO_Init+0xf0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2bff      	cmp	r3, #255	; 0xff
 8000c92:	d802      	bhi.n	8000c9a <HAL_GPIO_Init+0xfe>
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x104>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	3b08      	subs	r3, #8
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	6a39      	ldr	r1, [r7, #32]
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 8096 	beq.w	8000dfa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cce:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a58      	ldr	r2, [pc, #352]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <HAL_GPIO_Init+0x298>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce6:	4a54      	ldr	r2, [pc, #336]	; (8000e38 <HAL_GPIO_Init+0x29c>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <HAL_GPIO_Init+0x2a0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x19e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4a      	ldr	r2, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x2a4>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x19a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a49      	ldr	r2, [pc, #292]	; (8000e44 <HAL_GPIO_Init+0x2a8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x196>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <HAL_GPIO_Init+0x2ac>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x192>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e004      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d32:	2302      	movs	r3, #2
 8000d34:	e002      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d36:	2301      	movs	r3, #1
 8000d38:	e000      	b.n	8000d3c <HAL_GPIO_Init+0x1a0>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3e:	f002 0203 	and.w	r2, r2, #3
 8000d42:	0092      	lsls	r2, r2, #2
 8000d44:	4093      	lsls	r3, r2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4c:	493a      	ldr	r1, [pc, #232]	; (8000e38 <HAL_GPIO_Init+0x29c>)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	3302      	adds	r3, #2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d66:	4b39      	ldr	r3, [pc, #228]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4938      	ldr	r1, [pc, #224]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	600b      	str	r3, [r1, #0]
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d74:	4b35      	ldr	r3, [pc, #212]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4933      	ldr	r1, [pc, #204]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	492e      	ldr	r1, [pc, #184]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	604b      	str	r3, [r1, #4]
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4929      	ldr	r1, [pc, #164]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	608b      	str	r3, [r1, #8]
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dc6:	689a      	ldr	r2, [r3, #8]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	491f      	ldr	r1, [pc, #124]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	491a      	ldr	r1, [pc, #104]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	60cb      	str	r3, [r1, #12]
 8000dea:	e006      	b.n	8000dfa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	43db      	mvns	r3, r3
 8000df4:	4915      	ldr	r1, [pc, #84]	; (8000e4c <HAL_GPIO_Init+0x2b0>)
 8000df6:	4013      	ands	r3, r2
 8000df8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f47f aed0 	bne.w	8000bb0 <HAL_GPIO_Init+0x14>
  }
}
 8000e10:	bf00      	nop
 8000e12:	372c      	adds	r7, #44	; 0x2c
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	10110000 	.word	0x10110000
 8000e24:	10120000 	.word	0x10120000
 8000e28:	10310000 	.word	0x10310000
 8000e2c:	10320000 	.word	0x10320000
 8000e30:	10220000 	.word	0x10220000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40011000 	.word	0x40011000
 8000e48:	40011400 	.word	0x40011400
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e60:	787b      	ldrb	r3, [r7, #1]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e6c:	e003      	b.n	8000e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6e:	887b      	ldrh	r3, [r7, #2]
 8000e70:	041a      	lsls	r2, r3, #16
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	611a      	str	r2, [r3, #16]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e26c      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 8087 	beq.w	8000fae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea0:	4b92      	ldr	r3, [pc, #584]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d00c      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eac:	4b8f      	ldr	r3, [pc, #572]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d112      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
 8000eb8:	4b8c      	ldr	r3, [pc, #560]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ec4:	d10b      	bne.n	8000ede <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec6:	4b89      	ldr	r3, [pc, #548]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d06c      	beq.n	8000fac <HAL_RCC_OscConfig+0x12c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d168      	bne.n	8000fac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e246      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x76>
 8000ee8:	4b80      	ldr	r3, [pc, #512]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a7f      	ldr	r2, [pc, #508]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e02e      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x98>
 8000efe:	4b7b      	ldr	r3, [pc, #492]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7a      	ldr	r2, [pc, #488]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	4b78      	ldr	r3, [pc, #480]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a77      	ldr	r2, [pc, #476]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	e01d      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f20:	d10c      	bne.n	8000f3c <HAL_RCC_OscConfig+0xbc>
 8000f22:	4b72      	ldr	r3, [pc, #456]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a71      	ldr	r2, [pc, #452]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6e      	ldr	r2, [pc, #440]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	e00b      	b.n	8000f54 <HAL_RCC_OscConfig+0xd4>
 8000f3c:	4b6b      	ldr	r3, [pc, #428]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a6a      	ldr	r2, [pc, #424]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b68      	ldr	r3, [pc, #416]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a67      	ldr	r2, [pc, #412]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d013      	beq.n	8000f84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fd0e 	bl	800097c <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f64:	f7ff fd0a 	bl	800097c <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b64      	cmp	r3, #100	; 0x64
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e1fa      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	4b5d      	ldr	r3, [pc, #372]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f0      	beq.n	8000f64 <HAL_RCC_OscConfig+0xe4>
 8000f82:	e014      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fcfa 	bl	800097c <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fcf6 	bl	800097c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1e6      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9e:	4b53      	ldr	r3, [pc, #332]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f0      	bne.n	8000f8c <HAL_RCC_OscConfig+0x10c>
 8000faa:	e000      	b.n	8000fae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d063      	beq.n	8001082 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fba:	4b4c      	ldr	r3, [pc, #304]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fc6:	4b49      	ldr	r3, [pc, #292]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d11c      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
 8000fd2:	4b46      	ldr	r3, [pc, #280]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d116      	bne.n	800100c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fde:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d001      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e1ba      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4939      	ldr	r1, [pc, #228]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100a:	e03a      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d020      	beq.n	8001056 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001016:	2201      	movs	r2, #1
 8001018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fcaf 	bl	800097c <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff fcab 	bl	800097c <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e19b      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4927      	ldr	r1, [pc, #156]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e015      	b.n	8001082 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_RCC_OscConfig+0x270>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fc8e 	bl	800097c <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001064:	f7ff fc8a 	bl	800097c <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e17a      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d03a      	beq.n	8001104 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d019      	beq.n	80010ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_RCC_OscConfig+0x274>)
 8001098:	2201      	movs	r2, #1
 800109a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109c:	f7ff fc6e 	bl	800097c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a4:	f7ff fc6a 	bl	800097c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e15a      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_RCC_OscConfig+0x26c>)
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 faa8 	bl	8001618 <RCC_Delay>
 80010c8:	e01c      	b.n	8001104 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_RCC_OscConfig+0x274>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fc54 	bl	800097c <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010d6:	e00f      	b.n	80010f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fc50 	bl	800097c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d908      	bls.n	80010f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e140      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	42420000 	.word	0x42420000
 80010f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b9e      	ldr	r3, [pc, #632]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e9      	bne.n	80010d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80a6 	beq.w	800125e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b97      	ldr	r3, [pc, #604]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10d      	bne.n	800113e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b94      	ldr	r3, [pc, #592]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a93      	ldr	r2, [pc, #588]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b91      	ldr	r3, [pc, #580]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800113a:	2301      	movs	r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113e:	4b8e      	ldr	r3, [pc, #568]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001146:	2b00      	cmp	r3, #0
 8001148:	d118      	bne.n	800117c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800114a:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a8a      	ldr	r2, [pc, #552]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001156:	f7ff fc11 	bl	800097c <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115e:	f7ff fc0d 	bl	800097c <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	; 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0fd      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x4f8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0f0      	beq.n	800115e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d106      	bne.n	8001192 <HAL_RCC_OscConfig+0x312>
 8001184:	4b7b      	ldr	r3, [pc, #492]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a7a      	ldr	r2, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e02d      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0x334>
 800119a:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	4a75      	ldr	r2, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	f023 0301 	bic.w	r3, r3, #1
 80011a4:	6213      	str	r3, [r2, #32]
 80011a6:	4b73      	ldr	r3, [pc, #460]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a72      	ldr	r2, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	f023 0304 	bic.w	r3, r3, #4
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	e01c      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x356>
 80011bc:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4a6c      	ldr	r2, [pc, #432]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6213      	str	r3, [r2, #32]
 80011c8:	4b6a      	ldr	r3, [pc, #424]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a69      	ldr	r2, [pc, #420]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	e00b      	b.n	80011ee <HAL_RCC_OscConfig+0x36e>
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a66      	ldr	r2, [pc, #408]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	f023 0301 	bic.w	r3, r3, #1
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a63      	ldr	r2, [pc, #396]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d015      	beq.n	8001222 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f6:	f7ff fbc1 	bl	800097c <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	e00a      	b.n	8001214 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fbbd 	bl	800097c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	f241 3288 	movw	r2, #5000	; 0x1388
 800120c:	4293      	cmp	r3, r2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e0ab      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	4b57      	ldr	r3, [pc, #348]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0ee      	beq.n	80011fe <HAL_RCC_OscConfig+0x37e>
 8001220:	e014      	b.n	800124c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001222:	f7ff fbab 	bl	800097c <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fba7 	bl	800097c <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e095      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1ee      	bne.n	800122a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	4a47      	ldr	r2, [pc, #284]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 8081 	beq.w	800136a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d061      	beq.n	8001338 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d146      	bne.n	800130a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001282:	f7ff fb7b 	bl	800097c <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800128a:	f7ff fb77 	bl	800097c <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e067      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	4b35      	ldr	r3, [pc, #212]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d108      	bne.n	80012c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	492d      	ldr	r1, [pc, #180]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a19      	ldr	r1, [r3, #32]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	430b      	orrs	r3, r1
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb4b 	bl	800097c <HAL_GetTick>
 80012e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ea:	f7ff fb47 	bl	800097c <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e037      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x46a>
 8001308:	e02f      	b.n	800136a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_RCC_OscConfig+0x4fc>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fb34 	bl	800097c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001318:	f7ff fb30 	bl	800097c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e020      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x498>
 8001336:	e018      	b.n	800136a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e013      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001344:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	429a      	cmp	r2, r3
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	40007000 	.word	0x40007000
 800137c:	42420060 	.word	0x42420060

08001380 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e0d0      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d910      	bls.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0207 	bic.w	r2, r3, #7
 80013aa:	4965      	ldr	r1, [pc, #404]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e0b8      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a58      	ldr	r2, [pc, #352]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d040      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d115      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e07f      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e073      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b3d      	ldr	r3, [pc, #244]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e06b      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800145e:	4b39      	ldr	r3, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f023 0203 	bic.w	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001470:	f7ff fa84 	bl	800097c <HAL_GetTick>
 8001474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001476:	e00a      	b.n	800148e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001478:	f7ff fa80 	bl	800097c <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f241 3288 	movw	r2, #5000	; 0x1388
 8001486:	4293      	cmp	r3, r2
 8001488:	d901      	bls.n	800148e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e053      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 020c 	and.w	r2, r3, #12
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d1eb      	bne.n	8001478 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d210      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0207 	bic.w	r2, r3, #7
 80014b6:	4922      	ldr	r1, [pc, #136]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e032      	b.n	8001536 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	4916      	ldr	r1, [pc, #88]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d009      	beq.n	800150e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	490e      	ldr	r1, [pc, #56]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f000 f821 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 8001512:	4601      	mov	r1, r0
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1c8>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	fa21 f303 	lsr.w	r3, r1, r3
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1cc>)
 8001528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_ClockConfig+0x1d0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f9e2 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40022000 	.word	0x40022000
 8001544:	40021000 	.word	0x40021000
 8001548:	080016d8 	.word	0x080016d8
 800154c:	20000000 	.word	0x20000000
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	b490      	push	{r4, r7}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb0>)
 800155c:	1d3c      	adds	r4, r7, #4
 800155e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001560:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x40>
 800158e:	2b08      	cmp	r3, #8
 8001590:	d003      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x46>
 8001592:	e02d      	b.n	80015f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001596:	623b      	str	r3, [r7, #32]
      break;
 8001598:	e02d      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a6:	4413      	add	r3, r2
 80015a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	0c5b      	lsrs	r3, r3, #17
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015c6:	4413      	add	r3, r2
 80015c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d2:	fb02 f203 	mul.w	r2, r2, r3
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	e004      	b.n	80015ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	623b      	str	r3, [r7, #32]
      break;
 80015ee:	e002      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015f2:	623b      	str	r3, [r7, #32]
      break;
 80015f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015f6:	6a3b      	ldr	r3, [r7, #32]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc90      	pop	{r4, r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	080016c4 	.word	0x080016c4
 8001608:	080016d4 	.word	0x080016d4
 800160c:	40021000 	.word	0x40021000
 8001610:	007a1200 	.word	0x007a1200
 8001614:	003d0900 	.word	0x003d0900

08001618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <RCC_Delay+0x34>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <RCC_Delay+0x38>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0a5b      	lsrs	r3, r3, #9
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001634:	bf00      	nop
  }
  while (Delay --);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	60fa      	str	r2, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <RCC_Delay+0x1c>
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <__libc_init_array>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	2500      	movs	r5, #0
 8001658:	4e0c      	ldr	r6, [pc, #48]	; (800168c <__libc_init_array+0x38>)
 800165a:	4c0d      	ldr	r4, [pc, #52]	; (8001690 <__libc_init_array+0x3c>)
 800165c:	1ba4      	subs	r4, r4, r6
 800165e:	10a4      	asrs	r4, r4, #2
 8001660:	42a5      	cmp	r5, r4
 8001662:	d109      	bne.n	8001678 <__libc_init_array+0x24>
 8001664:	f000 f822 	bl	80016ac <_init>
 8001668:	2500      	movs	r5, #0
 800166a:	4e0a      	ldr	r6, [pc, #40]	; (8001694 <__libc_init_array+0x40>)
 800166c:	4c0a      	ldr	r4, [pc, #40]	; (8001698 <__libc_init_array+0x44>)
 800166e:	1ba4      	subs	r4, r4, r6
 8001670:	10a4      	asrs	r4, r4, #2
 8001672:	42a5      	cmp	r5, r4
 8001674:	d105      	bne.n	8001682 <__libc_init_array+0x2e>
 8001676:	bd70      	pop	{r4, r5, r6, pc}
 8001678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800167c:	4798      	blx	r3
 800167e:	3501      	adds	r5, #1
 8001680:	e7ee      	b.n	8001660 <__libc_init_array+0xc>
 8001682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001686:	4798      	blx	r3
 8001688:	3501      	adds	r5, #1
 800168a:	e7f2      	b.n	8001672 <__libc_init_array+0x1e>
 800168c:	080016e8 	.word	0x080016e8
 8001690:	080016e8 	.word	0x080016e8
 8001694:	080016e8 	.word	0x080016e8
 8001698:	080016ec 	.word	0x080016ec

0800169c <memset>:
 800169c:	4603      	mov	r3, r0
 800169e:	4402      	add	r2, r0
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d100      	bne.n	80016a6 <memset+0xa>
 80016a4:	4770      	bx	lr
 80016a6:	f803 1b01 	strb.w	r1, [r3], #1
 80016aa:	e7f9      	b.n	80016a0 <memset+0x4>

080016ac <_init>:
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	bf00      	nop
 80016b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b2:	bc08      	pop	{r3}
 80016b4:	469e      	mov	lr, r3
 80016b6:	4770      	bx	lr

080016b8 <_fini>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	bf00      	nop
 80016bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016be:	bc08      	pop	{r3}
 80016c0:	469e      	mov	lr, r3
 80016c2:	4770      	bx	lr
